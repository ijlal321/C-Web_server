// ========== WORKFLOW OF OUR APP ========= //


master_app registers -> MASTER_APP_REGISTER
-> server returns -> MASTER_APP_REGISTER_ACK

client registers -> CLIENT_REGISTER
-> server send to master_app CLIENT_REGISTER
-> MASTER_APP send req to cleint CLIENT_REGISTER_ACK // telling with public_id

master_app approves a client -> APPROVE_CLIENT/DIS_APPROVE_CLIENT
-> Server approves client
-> send notification to EVERYONE client's approved -> CLIENT_APPROVED/CLIENT_DIS_APPROVED

somedevice asks to add a file -> ADD_FILES/REMOVE_FILE
  add them to your file list, but set status to syncing, 
    file status can be downloading, uploading, syncing, removed, idle 
      download progress can also be added here if necessary
    thus no reparate fields for file, well we will need some type, but just refrence to that public_id and file_id
    just 1 caveat, file which is syning needs to be removed if no master app response in x time.
  when sender gets notif from master app FILES_ADDED, then it sent status to isle

-> server boradcast FILES_ADDED, FILE_REMOVED, if successful

someone asks a chunk -> REQUEST_CHUNK
-> server asks owner -> UPLOAD_CHUNK_REQUEST
-> owner uploads -> 
-> server notifies akser -> CHUNK_READY

      FIX STATE MANAGEMENT ONCE AND FOR ALL
      BY
      MOVING WEBSOCKET.js to a jsx
      which is done BY
      keeping all export [ourgoing messages outside]
      all ell else inside in a jsx

// =================== WHAT AM I DOING RN =============== //
  GOAL: MAKE SURE NOTHING GETS MISSED IN NORMAL USAGE - NOT TOO SIDE CASES< BUT ATLEAST IN NORMAL

    BEFORE GOING TO FLUTTER, I NEED A FULLY WORKING APP HERE IN WEB.
        CUR MODE IS BROADCAST MODE - THAT WILL BE IMPLEMENTED
      
    1. PROPER REGISTRATION TO NEW CLIENTS
      SEND FILES DATA TO them
        FOR THAT, FIRST, WHEN NEW CLIENT APPEAR TO MASTER_APP, MAKE A FULL FILE STRUCTURE FOR IT
        WHEN ANOTHER CLIENT APPEARS, SEND THAT + ALL ELSE TO IT
    

    client sent files
    server forward to MA
    MA -> files_added to server
    server broadcast files_added
    sender client will accpt gracefully

    MA add files, directly, broadcast everyone


when master_app connects -> (first time), server send all clients, so master app can show and approve later

if master app disconnects, ws just ignore all ws messages. no communication till masterapp returns. 
  or maybe we should close our ws connection entirely, so no one send anything else
  or maybe we should just stop ws, but keep allow http

reconnect -> if a client disconnects, then set public_id to null; thus show connecting page.
  ask periodically to connect.
  when connect, ask server for all latest files.
  then sync all files, and handle file changes





// ============== TODO =================== //

4. pause / resume 
5. client / server reconnect - [via private id]
6. make http req secure
7.  remove lock from client or files, whatever dont work well with uthash. [!! need research !!]


// CALL VICTOE -> Only Talk About Video and FYP. [MUST BE DONE THIS WEEKEND]


xxx. cleanup of chunks in server. full cleanup after x seconds

should we do:
1. upload folder possible frombrowser, but caveats. we need to handle it anyways due to app. (only if downloading file is in app).

