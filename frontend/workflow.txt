// ========== WORKFLOW OF OUR APP ========= //


master_app registers -> MASTER_APP_REGISTER
-> server returns -> MASTER_APP_REGISTER_ACK

client registers -> CLIENT_REGISTER
-> server send req to cleint CLIENT_REGISTER_ACK
-> server send to master_app NEW_CLIENT_REGISTERED

master_app approves a client -> APPROVE_CLIENT/DIS_APPROVE_CLIENT
-> Server approves client
-> send notification to EVERYONE client's approved -> CLIENT_APPROVED/CLIENT_DIS_APPROVED

somedevice asks to add a file -> ADD_FILES/REMOVE_FILE
  ❌ not now  [for add files, add them to a temp var, only when receive below msg. Add to UI].
  ❌ not now  [for remove, remove only when receive below message], 
    [ok, so when you select files, select files button becomes grey, if no ack in x sec, tell mess, that error]
-> server boradcast FILES_ADDED, FILE_REMOVED, if successful

someone asks a chunk -> REQUEST_CHUNK
-> server asks owner -> UPLOAD_CHUNK_REQUEST
-> owner uploads -> 
-> server notifies akser -> CHUNK_READY


// =================== WHAT AM I DOING RN =============== //
  GOAL: MAKE SURE NOTHING GETS MISSED IN NORMAL USAGE - NOT TOO SIDE CASES< BUT ATLEAST IN NORMAL

    client sent files
    server forward to MA
    MA -> files_added to server
    

  add files: server selects files, [duplicates removed]
    store blob in temp  
    send files to server [with a unique id]
    server send to master_app
    master_app store new files metadata, [ignore any duplicates, bcz there wont be any],
      and send to server, whcih will broadcast to all clients
    [if sender client dont get a response within x sec, it will retry sending].
    original client when get it,
      matches unique id
      store new files in another map
      remove blob files that server rejects

    after x second, if sender client dont get a response, then remove files + blobs completely

when master_app connects -> (first time), server send all clients, so master app can show and approve later

if master app disconnects, ws just ignore all ws messages. no communication till masterapp returns. 
  or maybe we should close our ws connection entirely, so no one send anything else
  or maybe we should just stop ws, but keep allow http

reconnect -> if a client disconnects, then set public_id to null; thus show connecting page.
  ask periodically to connect.
  when connect, ask server for all latest files.
  then sync all files, and handle file changes





// ============== TODO =================== //
    1. Broadcast issue,    // DONE
        1. do i send these initial to server too ? as an ack ?  ✅ YES
        2. how to handle broadcast client, meaning send to approved too ?

then we modularize our client files structure, as we talked below. 3 things in 1.
3. refactor or change - files + client info + download status => all 3 into 1 should be.


4. pause / resume 
5. client / server reconnect - [via private id]
6. make http req secure
7.  remove lock from client or files, whatever dont work well with uthash. [!! need research !!]



// ** IMP // a way to handle websocket resend issue is, when add or remove files, this gets send to UI. ALl stuff. when UI accepts it, then UI broadcast message. Thus a sigulairity is fromed.

// CALL VICTOE -> Only Talk About Video and FYP. [MUST BE DONE THIS WEEKEND]


xxx. cleanup of chunks in server. full cleanup after x seconds

should we do:
1. upload folder possible frombrowser, but caveats. we need to handle it anyways due to app. (only if downloading file is in app).

